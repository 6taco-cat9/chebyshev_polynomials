# recursive formula
# cos(nx) = 2cos(x)cos((n-1)x) - cos((n-2)x)
# cos(2x) = 2cos^2(x) - 1

def main(n):
    co_eff_lst = cos_nx(n) 
#    for i in co_eff_lst:
#        print(i)
    return co_eff_lst

'''
co_eff = []
def cos_nx(n):
    if n == 1:
        if [1] not in co_eff: co_eff.append([1])
        return [1]
    elif n == 2:
        if [2, -1] not in co_eff: co_eff.append([2, -1])
        return [2, -1]

    lst1 = [i * 2 for i in cos_nx(n - 1)]
    lst2 = [0] + [i * (-1) for i in cos_nx(n - 2)]

    if len(lst1) < len(lst2): lst1 = lst1 + [0]

    lst3 = [sum(i) for i in zip(lst1,lst2)]
    if lst3 not in co_eff: co_eff.append(lst3)

    return lst3
'''

def cos_nx(n):
    lst = [[1], [2, -1]]
    for i in range(2, n):
        a = [j * 2 for j in lst[i-1]]
        b = [0] + [j * (-1) for j in lst[i-2]]
        if len(a) < len(b): a = a + [0]
        lst.append([sum(j) for j in zip(a,b)])
    return lst

def Z_p(n, co_eff_lst):
    co_eff_Zp = []
    for lst in co_eff_lst:
        co_eff_Zp.append([i % n for i in lst])
    return co_eff_Zp


def cos_nx_Zm(n, m, x):
    co_eff = main(102)[n-1]
    sum = 0
    for i in co_eff:
        sum += i * x**n
        n = n-2
    return sum % m


if __name__ == "__main__":
    main(20)
    print("\n")
    # for i in [3,5,7,11,13,17,19]:
    Z_p(3, main(50))
    print("\n")
    Z_p(5, main(50))


'''
for n in range(2, 101):
    for m in range(2, 101):
        if sorted([cos_nx_Zm(n, m, i) for i in range(1, m)]) == [i for i in range(1, m)]:
            print("T"+ str(n)+ " Z" + str(m)+ " - G")
        else:
            print("T"+ str(n)+ " Z" + str(m)+ " - N")
'''

# to do - 
# period count in Zn
# Tn(x) in Zm # table


def period_count(p, col):
    lst = Z_p(p, main(19))
    start = 0
    for i in range(len(lst)):
        if len(lst[i]) - 1 == col:
            start = i
            break
    period_lst = [lst[i][col] for i in range(start, len(lst))]
    return period_lst

def principal_period(modlist):
    a = ''.join(str(m) for m in modlist)
    i = (a+a).find(a, 1, -1)
    return None if i == -1 else a[:i]

print(Z_p(3, main(19)))
print(period_count(3, 1))
print(principal_period(period_count(3, 1)))